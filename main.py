# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a5kZcvKIS2xq4uWnpgoXv-tROEKy54NM
"""

import pandas as pd
import numpy as np
from keras.models import Sequential
from keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler
from scikeras.wrappers import KerasRegressor
from sklearn.model_selection import GridSearchCV
from keras.models import load_model

# Load the train and test datasets
train_data = pd.read_csv("train.csv")
test_data = pd.read_csv("test.csv")
# Load the saved model
# loaded_model = load_model('sales_prediction_model.h5')

# Data Preprocessing
train_data['date'] = pd.to_datetime(train_data['date'])
test_data['date'] = pd.to_datetime(test_data['date'])

train_data.set_index('date', inplace=True)
test_data.set_index('date', inplace=True)

train_data['day'] = train_data.index.day
train_data['month'] = train_data.index.month
train_data['year'] = train_data.index.year
train_data['day_of_week'] = train_data.index.dayofweek

test_data['day'] = test_data.index.day
test_data['month'] = test_data.index.month
test_data['year'] = test_data.index.year
test_data['day_of_week'] = test_data.index.dayofweek

# Model Preparation and Training
common_cols = ['store', 'item', 'day', 'month', 'year', 'day_of_week']
scaler = MinMaxScaler()
scaler.fit(train_data[common_cols])

scaled_train_data = scaler.transform(train_data[common_cols])
scaled_test_data = scaler.transform(test_data[common_cols])

def prepare_data(data, n_steps):
    X, y = [], []
    for i in range(len(data) - n_steps):
        X.append(data[i:i + n_steps])
        y.append(data[i + n_steps])
    return np.array(X), np.array(y)

n_steps = 10
X_train, y_train = prepare_data(scaled_train_data, n_steps)
X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], X_train.shape[2]))

# Function to create model
def create_model(optimizer='adam', activation='relu'):
    model = Sequential()
    model.add(LSTM(50, activation=activation, input_shape=(n_steps, X_train.shape[2])))
    model.add(Dense(X_train.shape[2]))  # Output layer with the same number of features
    model.compile(optimizer=optimizer, loss='mse')
    return model

# Define the model
model = KerasRegressor(build_fn=create_model, verbose=0)

# Define the grid search parameters
param_grid = {
    'optimizer': ['adam', 'rmsprop'],
    'batch_size': [32, 64],  # Explore different batch sizes
    'epochs': [50, 100],  # Vary the number of epochs
}
# Create Grid Search
grid = GridSearchCV(estimator=model, param_grid=param_grid, cv=3, verbose=2)
grid_result = grid.fit(X_train, y_train)

# Summarize results
print("Best: %f using %s" % (grid_result.best_score_, grid_result.best_params_))

model = Sequential()
model.add(LSTM(100, activation='relu', input_shape=(n_steps, X_train.shape[2]), return_sequences=True))
model.add(LSTM(50, activation='relu'))
model.add(Dense(X_train.shape[2]))
model.compile(optimizer='adam', loss='mse')

model.fit(X_train, y_train, epochs=50, batch_size=32, verbose=1)

# Test Data Preparation and Prediction
def prepare_test_data(data, n_steps):
    X = []
    for i in range(len(data) - n_steps):
        X.append(data[i:i + n_steps])
    return np.array(X)

X_test = prepare_test_data(scaled_test_data, n_steps)
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], X_test.shape[2]))

predicted_sales = model.predict(X_test)
predicted_sales = scaler.inverse_transform(predicted_sales)

print(predicted_sales)

# Add the predicted sales to the test dataset
test_data['predicted_sales'] = predicted_sales
# Save the predictions to a CSV file with 'id' and 'predicted_sales' columns
test_data.reset_index(inplace=True)  # Reset index to access 'date' as a column

predicted_df = pd.DataFrame({'id': test_data['id'], 'predicted_sales': predicted_sales.flatten()})

# Save the predictions to a CSV file with 'id' and 'predicted_sales' columns
predicted_df.to_csv('predicted_sales.csv', index=False)

plt.figure(figsize=(12, 6))
plt.plot(test_data.index, test_data['predicted_sales'], label='Predicted Sales', marker='x')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.title('Predicted Sales')
plt.legend()
plt.show()

model.save('sales_prediction_model.h5')